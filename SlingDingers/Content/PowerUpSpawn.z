class PowerUpSpawn : ZilchComponent
{
    var Rand    : Random = Random();
    var CurPowerup : CogPath = new CogPath();
    [Static] var AllPowerupSpawners : Array[PowerUpSpawn] = new Array[PowerUpSpawn]();
    function Initialize(init : CogInitializer)
    {
        PowerUpSpawn.AllPowerupSpawners.Add(this);
        //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);s.o
    }
    
    function CompareDists(location1 : Real3, location2 : Real3) : Real
    {
        var tween1 = this.Owner.Transform.Translation - location1;
        var tween2 = this.Owner.Transform.Translation - location2;
        
        return Math.Abs((Math.Abs(Math.Length(tween1))) - (Math.Abs(Math.Length(tween2))));
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
    }
    
    function SpawnPowerup()
    {
        var randomInt = this.Rand.Integer() % 3;
        
        var whatArchetype : Archetype = null;
        
        if(randomInt == 0)
        {
            whatArchetype = Archetype.PickupAR;
        }
        else if(randomInt == 1)
        {
            whatArchetype = Archetype.PickupBomb;
        }
        else if(randomInt == 2)
        {
            whatArchetype = Archetype.PickupDunker;
        }
        
        this.Space.CreateAtPosition(Archetype.GunSpawnParticle, this.Owner.Transform.Translation);
        this.CurPowerup.Cog = this.Space.CreateAtPosition(whatArchetype, this.Owner.Transform.Translation);
    }
}
