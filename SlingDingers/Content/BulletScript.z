class BulletScript : ZilchComponent
{
    [Property]
    var Type : WeaponType;
    
    [Property]
    var GunType : WeaponName;
    
    [Property]
    var Sprite : SpriteSource;
    
    [Property]
    var Speed : Real;
    
    [Property]
    var RoF : Real;
    
    [Property]
    var Ammo : Integer;
    
    [Property]
    var BurstEffect : Archetype;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    
    [Property]
    var NumBounces : Real = 1;
    var BouncedThisLife : Real = 0;

    var BounceDelay : Real = 0.5;
    var BounceDelayCounter : Real = 0;

    function OnCollisionStarted(event : CollisionEvent)
    {
        if(this.Type == WeaponType.Type_Laser) return;
        
        if(this.Type == WeaponType.Type_Dunk)
        {
            event.OtherObject.DispatchEvent(Events.BlockDestroy, new BlockDestroy(this.Owner.Transform.Translation - event.OtherObject.Transform.Translation, 10));
            return;
        }
        
        if(this.Type != WeaponType.Type_Arc)
        {
            event.OtherObject.DispatchEvent(Events.BlockDestroy, new BlockDestroy(this.Owner.Transform.Translation - event.OtherObject.Transform.Translation, 10));
            
            this.Burst(event.FirstPoint.WorldNormalTowardsOther);
        }
        else
        {
            if(this.BouncedThisLife >= this.NumBounces)
            {
                this.Space.PhysicsSpace.DispatchWithinSphere(this.Owner.Transform.Translation, 2, Events.BlockDestroy, new BlockDestroy(this.Owner.Transform.Translation - event.OtherObject.Transform.Translation, 1));
                
                this.Burst(event.FirstPoint.WorldNormalTowardsOther);
            }
            
            this.LevelSettings.CameraViewport.Camera.ScreenShake.ShakeLeoApproved(this.Owner.Transform.Translation);
            
            if(this.BounceDelayCounter >= this.BounceDelay)
            {
                this.BouncedThisLife += 1;
                this.BounceDelayCounter = 0;
            }
        }
    }

    function OnCollisionEnded(event : CollisionEvent)
    {
        
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.BounceDelayCounter += event.Dt;
        
    }
     
    function Propell(vec : Real3, wepType : WeaponType)
    {
        vec = Math.Normalize(vec);
        
        if(wepType == WeaponType.Type_Laser)
        {
            //this.LaserFire();
            return;
        }
        
        this.Owner.RigidBody.Velocity = vec * this.Speed;
    }
    
    /*
    function LaserFire()
    {
        //raycaststuff
        //send events to objects it hits
        var ray = Ray();
        ray.Start = this.Owner.Transform.Translation;
        
        var dir = Real3(1,1,0);
        ray.Direction = dir;
            
        var newDir = Math.Normalize(Real3(dir.Y, -dir.X, 0));
        
        for(var i = -1; i <= 1; ++i)
        {
            ray.Direction = dir;
            var count = 50;

            var results = this.Space.PhysicsSpace.CastRayResults(ray, count);
            
            var newObj = this.Space.CreateAtPosition(Archetype.Laser_Sprite, this.Owner.Transform.Translation);
            newObj.Transform.Scale *= Real3(100,3,1);
            
            newObj.Orientation.LookAtDirection(dir);
            
            foreach(var result in results)
            {
                result.ObjectHit.DispatchEvent(Events.BlockDestroy, new BlockDestroy(Real3(), 10));
            }
        }
    }*/
    
    function Burst(normal : Real3)
    {
        //Effect
        
        var obj = this.Space.CreateAtPosition(this.BurstEffect, this.Owner.Transform.Translation);
        
        foreach(var child in obj.Children)
        {
            if(child.SpriteParticleSystem != null && child.AffectedByNormal != null)
            {
                child.SphericalParticleEmitter.StartVelocity = normal * -child.AffectedByNormal.Magnitude;
            }
        }
        
        this.Owner.Destroy();
    }
}
