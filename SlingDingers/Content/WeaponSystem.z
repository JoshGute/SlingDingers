
enum WeaponType
{
    Type_Projectile,
    Type_Dunk,
    Type_Laser,
    Type_Arc
}

enum WeaponName
{
    Pistol,
    MachineGun,
    Dunker,
    Laser,
    Bomb
}

class WeaponSystem : ZilchComponent
{
    [Property]
    var DefaultWeapon : Archetype;
    
    [Property]
    var CurrentWepaon : Archetype;
    
    var RoF : Real;
    var MaxAmmo : Integer;
    var Ammo : Integer;
    var Delay : Real = 10;
    var GunType : WeaponName;
    
    sends AmmoUpdate : AmmoEvent;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        //this.Equip();
    }

    function OnCollisionStarted(event : CollisionEvent)
    {
        if(event.OtherObject.PowerUp != null)
        {
            this.CurrentWepaon = event.OtherObject.PowerUp.Weapon;
            this.GunType = event.OtherObject.PowerUp.GunType;
            this.Equip();
            
            event.OtherObject.Destroy();
        }
    }
    
    function Equip()
    {
        var bulletObj = this.Space.CreateAtPosition(this.CurrentWepaon, Real3(0,-200,0));
        this.RoF = bulletObj.BulletScript.RoF;
        this.Ammo = bulletObj.BulletScript.Ammo;
        this.MaxAmmo = bulletObj.BulletScript.Ammo;
        this.GunType = bulletObj.BulletScript.GunType;
        bulletObj.Destroy();
        
        this.Owner.CharacterController.Gun.FindChildByName("Reticule").Sprite.SpriteSource = bulletObj.BulletScript.Sprite;
        this.Owner.SoundEmitter.PlayCue(SoundCue.PickUpAK);
        //TODO: fix player sent when players exist
        //TODO: send to HUD instead of space maybe
        var hud = this.GameSession.FindSpaceByName("HudSpace");
        hud.DispatchEvent(Events.AmmoUpdate, new AmmoEvent(this.Owner.CharacterController.PNumberData, this.GunType, this.Ammo, this.MaxAmmo));
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.Delay += event.Dt;
        
        if(Zero.Keyboard.KeyIsDown(Keys.Space))
        {
            this.Fire(Real3(1,1,1));
        }
    }
    
    function Fire(vec : Real3)
    {
        if(this.Ammo <= 0) 
        {
            var previousWeapon = this.CurrentWepaon;
            this.CurrentWepaon = this.DefaultWeapon;
            if(previousWeapon != this.DefaultWeapon)
            {
                this.Owner.SoundEmitter.PlayCue(SoundCue.OutOfAmmo);
                Console.WriteLine("Oboi");
                this.Equip();
            }
        }
        
        if(this.Delay <= this.RoF) return;
        
        this.LevelSettings.CameraViewport.Camera.ScreenShake.ShakeLeoApproved(this.Owner.Transform.Translation);
        
        --this.Ammo;
        
        var hud = this.GameSession.FindSpaceByName("HudSpace");
        Console.WriteLine(this.GunType);
        hud.DispatchEvent(Events.AmmoUpdate, new AmmoEvent(this.Owner.CharacterController.PNumberData, this.GunType, this.Ammo, this.MaxAmmo));
        
        this.Delay = 0;
        var bulletObj = this.Space.CreateAtPosition(this.CurrentWepaon, Real3((this.Owner.Transform.Translation + (vec)).XY, 0));
        
        bulletObj.BulletScript.Source = this.Owner;
        bulletObj.BulletScript.Propell(vec, bulletObj.BulletScript.Type);
        
        this.Owner.CharacterController.Vibrate(0.25,0.25);
        
        if(bulletObj.BulletScript.Type == WeaponType.Type_Dunk) bulletObj.RigidBody.Velocity += Real3(0,-50,0);
        
        if(this.CurrentWepaon == Archetype.DunkRound)
        {
            
            this.Owner.RigidBody.Velocity = Real3(this.Owner.RigidBody.Velocity.X, 0, this.Owner.RigidBody.Velocity.Z);
            this.Owner.Platforming.Grounded = true;
            this.Owner.Platforming.Jump();
        }
    }
}
